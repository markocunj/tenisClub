using TC.DAL;
using TC.DAL.Infrastrucutre;
using TC.DomainModels;
using TC.DomainModels.CoreInterfaces;
using TC.Services.DTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace TC.DomainModels
{
    public class ApplicationDbContext : IdentityDbContext
    {

        public DbSet<Audit> Audits { get; set; }

        private readonly IHttpContextAccessor _httpContextAccessor;

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options, IHttpContextAccessor httpContextAccessor) : base(options)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            builder.LoadAllEntityConfigurations();
        }

        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            int result = -1;

            var auditEntries = OnBeforeSaveChanges();

            HttpContext httpContext = _httpContextAccessor.HttpContext;

            long userId = 0;

            //if (httpContext?.User != null && httpContext.User.Identity.IsAuthenticated)
            //{
            //    var usernameClaim = httpContext.User.Claims.FirstOrDefault(claim => claim.Type == JwtClaimNameConstatns.USERNAME_CLAIM_NAME);
            //    if (usernameClaim != null)
            //    {
            //        var username = usernameClaim.Value;
            //        //userId = long.Parse(httpContext.User.Claims.FirstOrDefault(claim => claim.Type == JwtClaimNameConstatns.USERNAME_CLAIM_NAME).Value);
            //    }
            //}

            try
            {
                result = base.SaveChanges(acceptAllChangesOnSuccess);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            await OnAfterSaveChanges(auditEntries);

            return result;
        }

        private List<AuditEntry> OnBeforeSaveChanges()
        {
            var dbContext = this;

            string userId = "";
            HttpContext httpContext = _httpContextAccessor.HttpContext;
            if (_httpContextAccessor.HttpContext == null)
            {
                userId = null;
            }
            else
            {
                if (httpContext?.User != null && httpContext.User.Identity.IsAuthenticated)
                {
                    var stringUserId = httpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
                    if (!String.IsNullOrEmpty(stringUserId))
                    {
                        userId = stringUserId;
                    }
                    //var useridClaim = httpContext.User.Claims.FirstOrDefault(claim => claim.Type == JwtClaimNameConstatns.USER_ID_CLAIM_NAME);
                    //if (useridClaim != null)
                    //{
                    //    userId = Convert.ToInt64(useridClaim.Value);
                    //}
                }
            }
            ChangeTracker.DetectChanges();

            var auditEntries = new List<AuditEntry>();

            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audit
                    //|| entry.Entity is ProgrammeLocation
                    //|| entry.Entity is SpecialProgrammeLocation
                    //|| entry.Entity is EnrollmentDocumentConditionOfPointAndBenefit
                    || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry);
                auditEntry.UserId = userId;
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues = property.CurrentValue.ToString();
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            var currentInBase = entry.GetDatabaseValues().GetValue<object>(propertyName);
                            if (property.IsModified)
                            {
                                if(currentInBase == null && property.CurrentValue == null)
                                {
                                    break;
                                }
                                if(property.CurrentValue == null)
                                {
                                    auditEntry.OldValues[propertyName] = currentInBase;
                                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                                    break;
                                }
                                if(currentInBase == null)
                                {
                                    auditEntry.OldValues[propertyName] = null;
                                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                                    break;
                                }
                                if (currentInBase.ToString() != property.CurrentValue.ToString())
                                {
                                    auditEntry.OldValues[propertyName] = entry.GetDatabaseValues().GetValue<object>(propertyName);
                                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                                    break;
                                }
                            }
                            break;
                    }
                }

                // soft delete logic   
                if (entry.State == EntityState.Deleted && entry.Entity is IDeletionAuditedEntity deletionAuditedEntity)
                {
                    deletionAuditedEntity.DateDeleted = DateTimeOffset.UtcNow;
                    deletionAuditedEntity.DeletedBy = userId;
                }

                if (entry.State == EntityState.Deleted && entry.Entity is ISoftDeletableEntity softDeletable)
                {
                    entry.State = EntityState.Modified;
                    softDeletable.IsDeleted = true;
                }

                if (entry.State == EntityState.Added && entry.Entity is ICreationAuditedEntity creationAuditedEntity)
                {
                    entry.State = EntityState.Added;
                    creationAuditedEntity.DateCreated = DateTimeOffset.UtcNow;
                    creationAuditedEntity.CreatedBy = userId;
                }


                if (entry.State == EntityState.Modified && entry.Entity is IModificationAuditedEntity modificationAuditedEntity)
                {

                    entry.State = EntityState.Modified;
                    modificationAuditedEntity.LastModified = DateTimeOffset.UtcNow;
                    modificationAuditedEntity.ModifiedBy = userId;
                }


                if (entry.State == EntityState.Added && entry.Entity is IActiveFromToEntity activeFromToEntity)
                {
                    entry.State = EntityState.Added;
                    if (activeFromToEntity.ActiveFrom == DateTimeOffset.MinValue)
                    {
                        activeFromToEntity.ActiveFrom = DateTimeOffset.UtcNow;
                    }
                    activeFromToEntity.IsActive = true;
                }

                if (entry.State == EntityState.Modified && entry.Entity is IActiveFromToEntity activeFromToEnt)
                {
                    // set old value to active is false

                    // set new value to active is true

                    // TODO: should we be modifying this at all?
                }

            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Audits.Add(auditEntry.ToAudit(userId));
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            string userId = null;
            HttpContext httpContext = _httpContextAccessor.HttpContext;
            if (httpContext?.User != null && httpContext.User.Identity.IsAuthenticated)
            {
                var stringUserId = httpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
                if (!String.IsNullOrEmpty(stringUserId))
                {
                    userId = stringUserId;
                }
            }
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues = prop.CurrentValue.ToString();
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                Audits.Add(auditEntry.ToAudit(userId));
            }

            return SaveChangesAsync();
        }

    }
}
